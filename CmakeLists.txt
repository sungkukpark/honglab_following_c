# CMake 최소 요구 버전 (3.11 이상 필요)
cmake_minimum_required(VERSION 3.11)

# 패키지 이름과 버전 정의
set(PACKAGE_NAME READABLE_CODE-C-CORE_DEVELOPMENT_ENVIRONMENT_SETTING)
set(PACKAGE_VERSION 1.0.1)

# 프로젝트 정의 (C 언어 사용)
project(${PACKAGE_NAME} VERSION ${PACKAGE_VERSION} LANGUAGES C)

# C 표준 설정 (예: C11)
set(CMAKE_C_STANDARD 11) # 사용할 C 표준 버전 지정
set(CMAKE_C_STANDARD_REQUIRED ON) # 반드시 지정한 표준을 강제
set(CMAKE_C_EXTENSIONS OFF) # gcc 확장(gnu11)이 아닌 순수 표준(c11) 사용

# CPack 패키징용 기본 설정
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)

# 소스 경로 변수 설정
set(${PACKAGE_NAME}_PATH ${CMAKE_CURRENT_SOURCE_DIR})
set(${PACKAGE_NAME}_SOURCE_PATH "${${PACKAGE_NAME}_PATH}/src")

# 상태 메시지 출력 (빌드 시 확인용 로그)
message(STATUS "PACKAGE_NAME: ${PACKAGE_NAME}")
message(STATUS "PACKAGE_VERSION: ${PACKAGE_VERSION}")
message(STATUS "${PACKAGE_NAME}_PATH: ${${PACKAGE_NAME}_PATH}")
message(STATUS "${PACKAGE_NAME}_SOURCE_PATH: ${${PACKAGE_NAME}_SOURCE_PATH}")

# 실행 파일 생성 (C 소스 지정)
add_executable(${PACKAGE_NAME}_MAIN MyFirstProject/main.c)

# 컴파일러 옵션 추가
target_compile_options(${PACKAGE_NAME}_MAIN PRIVATE
    -Wall # 일반적인 모든 경고 표시
    -Wextra # 추가적인 경고 표시
    -Wpedantic # 표준을 엄격히 따르지 않는 코드에 경고
    -Werror # 경고를 에러로 처리
)
